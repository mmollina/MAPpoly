// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vcf_get_probabilities
Rcpp::List vcf_get_probabilities(Rcpp::StringMatrix& mat, int pl_pos);
RcppExport SEXP _mappoly_vcf_get_probabilities(SEXP matSEXP, SEXP pl_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type pl_pos(pl_posSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_get_probabilities(mat, pl_pos));
    return rcpp_result_gen;
END_RCPP
}
// vcf_transform_dosage
Rcpp::NumericMatrix vcf_transform_dosage(Rcpp::StringMatrix& mat, int gt_pos);
RcppExport SEXP _mappoly_vcf_transform_dosage(SEXP matSEXP, SEXP gt_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type gt_pos(gt_posSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_transform_dosage(mat, gt_pos));
    return rcpp_result_gen;
END_RCPP
}
// vcf_get_ploidy
Rcpp::NumericMatrix vcf_get_ploidy(Rcpp::StringMatrix& mat, int gt_pos);
RcppExport SEXP _mappoly_vcf_get_ploidy(SEXP matSEXP, SEXP gt_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type gt_pos(gt_posSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_get_ploidy(mat, gt_pos));
    return rcpp_result_gen;
END_RCPP
}
// vcf_get_depth
Rcpp::NumericMatrix vcf_get_depth(Rcpp::StringMatrix& mat, int dp_pos);
RcppExport SEXP _mappoly_vcf_get_depth(SEXP matSEXP, SEXP dp_posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type dp_pos(dp_posSEXP);
    rcpp_result_gen = Rcpp::wrap(vcf_get_depth(mat, dp_pos));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP calc_genoprob(void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP calc_genoprob_prior(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP calc_genprob_haplo(void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP calc_genprob_haplo_highprec(void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP calc_genprob_single_parent(void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP est_haplotype_map(void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP est_haplotype_map_highprec(void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP est_hmm_map_single_parent(void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP est_map_hmm(void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP est_map_hmm_highprec(void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP get_counts_single_parent_cpp(void *, void *, void *, void *, void *, void *);
RcppExport SEXP loglike_hmm(void *, void *, void *, void *, void *, void *);
RcppExport SEXP pairwise_rf_estimation_disc(void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP pairwise_rf_estimation_disc_rcpp(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP pairwise_rf_estimation_prob(void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport SEXP poly_hmm_est_CPP(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_mappoly_vcf_get_probabilities", (DL_FUNC) &_mappoly_vcf_get_probabilities, 2},
    {"_mappoly_vcf_transform_dosage", (DL_FUNC) &_mappoly_vcf_transform_dosage, 2},
    {"_mappoly_vcf_get_ploidy", (DL_FUNC) &_mappoly_vcf_get_ploidy, 2},
    {"_mappoly_vcf_get_depth", (DL_FUNC) &_mappoly_vcf_get_depth, 2},
    {"calc_genoprob",                    (DL_FUNC) &calc_genoprob,                     7},
    {"calc_genoprob_prior",              (DL_FUNC) &calc_genoprob_prior,              12},
    {"calc_genprob_haplo",               (DL_FUNC) &calc_genprob_haplo,                8},
    {"calc_genprob_haplo_highprec",      (DL_FUNC) &calc_genprob_haplo_highprec,       8},
    {"calc_genprob_single_parent",       (DL_FUNC) &calc_genprob_single_parent,        8},
    {"est_haplotype_map",                (DL_FUNC) &est_haplotype_map,                 9},
    {"est_haplotype_map_highprec",       (DL_FUNC) &est_haplotype_map_highprec,        9},
    {"est_hmm_map_single_parent",        (DL_FUNC) &est_hmm_map_single_parent,         9},
    {"est_map_hmm",                      (DL_FUNC) &est_map_hmm,                       8},
    {"est_map_hmm_highprec",             (DL_FUNC) &est_map_hmm_highprec,              8},
    {"get_counts_single_parent_cpp",     (DL_FUNC) &get_counts_single_parent_cpp,      6},
    {"loglike_hmm",                      (DL_FUNC) &loglike_hmm,                       6},
    {"pairwise_rf_estimation_disc",      (DL_FUNC) &pairwise_rf_estimation_disc,       7},
    {"pairwise_rf_estimation_disc_rcpp", (DL_FUNC) &pairwise_rf_estimation_disc_rcpp, 12},
    {"pairwise_rf_estimation_prob",      (DL_FUNC) &pairwise_rf_estimation_prob,       8},
    {"poly_hmm_est_CPP",                 (DL_FUNC) &poly_hmm_est_CPP,                 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_mappoly(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
